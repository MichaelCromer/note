#!/bin/bash
#
# This script is used to create a new note in the notes file

# Set the notes directory

NOTES_FILE="$HOME/.notes"

show_help () {
  cat << EOF
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

  Usage: note [OPTIONS] -- [NOTE]      

--------------------------------------------------------------------------------

  Summary:
    Manage, filter, and display notes from anywhere in your terminal.

--------------------------------------------------------------------------------

  Options:

    GENERAL MATCHING:
      -a,  --after           DATE     Include notes on or after DATE 
      -b,  --before          DATE     Include notes strictly before DATE 
      -d,  --date            [DATE]   Include notes exactly on DATE 
      -xd, --not-date        DATE     Exclude notes exactly on DATE 
      -m,  --match           STRING   Include notes matching STRING
      -xm, --not-match       STRING   Exclude notes matching STRING
      -r,  --git-repo        [REPO]   Include notes from git repository REPO
      -xr  --not-git-repo    [REPO]   Exclude notes from git repository REPO
      -B,  --git-branch      [BRANCH] Include notes from git branch BRANCH
      -xB  --not-git-branch  [BRANCH] Exclude notes from git branch BRANCH

    SPECIAL MATCHING:
      -l,  --last [N]   Display the last matching note only.
                        If N is given, display the last N notes.
      -g,  --git        Shorthand for "-r -B" (current repo/branch).
      -xg, --not-git    Shorthand for "-xr -xB" (not current repo/branch).

    OTHER:
      -s, --suppress    Suppress the displaying of notes.
      -e, --edit        Edit the output in \$EDITOR.
      -X, --extract     Remove the matched notes after displaying them.
      -h, --help        Display this help and exit.
      -i, --info        Display information about this script and exit.
      --version         Display version information and exit.

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
EOF
}

show_info () {
  cat << EOF
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

  Description:

    FILTERING:
      - Selects for notes matching all given options (logical AND).
      - If no options are given, no filtering is performed, and nothing is 
          displayed.
      - Dates may be in the format YYYY-MM-DD or YYYY-MM or YYYY.
      - If optional arguments are omitted, the 'current' value is used.
      - All string matching is done via regular expressions. You can use 
        standard regex metacharacters. To match a literal metacharacter,
        escape it with a backslash.

    NOTES:
      - A note must be preceded by the "--" option, to avoid ambiguity.
      - If no "--" is given, or the note is empty, no note is added.
      - If the current directory is inside a git repository, the repository 
          name and current branch are automatically recorded.


--------------------------------------------------------------------------------

  Examples:
    note -- "my new note"       Add the note "my new note" to the notes file.
    note -m "string"            Display all notes matching "string".
    note -a 2023                Display all notes from the year 2023 onwards.
    note -e -date               Display today's notes in the editor.
    note -d 2020-01 -- "text"   Display all notes from January 2020,
                                  then add the note "text" to the notes file.
    note -d -X                  Delete all notes from today.
    note -b 2020-03 -xd 2018-01-10 -m "string1|string2" 
                                Display all notes from before March 2020, 
                                  excluding those from 10 January 2018,
                                  and which match "string1" or "string2".
    note -X -l10 -gr "my_repo" -xgb "hotfix" -m "feature" >> TODO.md
                                Find the last ten notes which are:
                                  from the git repository "my_repo"; 
                                  excluding those from the branch "hotfix";
                                  and which match "feature". 
                                Then, delete them from the notes file and 
                                  append them to the TODO.md file.

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
EOF
}

show_version () {
  cat << EOF
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

  note version 1.1
  
  Author:  Michael C. Cromer
  License: GNU General Public License v3.0

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
EOF
}

verify_date () {
  local date="$1"
  if ! [[ $date =~ ^[0-9]{4}(-[0-9]{2}){0,2}$ ]]; then
    echo "Invalid date format (must be YYYY(-MM(-DD))): $after_date" >&2
    exit 1
  fi
}

parse_note () {
  local input="$1"
  input="$(echo "$input" | tr -d '\t' | tr -d '\n')"
  input="$(sed 's/[\*;&<>`|]/\\&/g' <<< "$input")"
  echo "$input"
}

is_git_repo () {
  git rev-parse --is-inside-work-tree &> /dev/null
}

get_repo_name () {
  basename "$(git rev-parse --show-toplevel)"
}

get_branch_name () {
  git rev-parse --abbrev-ref HEAD
}

main () {

  local repo=""
  local branch=""
  if is_git_repo; then
    local is_git=1
    repo=$(get_repo_name)
    branch=$(get_branch_name)
  fi

  if [[ $# -eq 0 ]]; then
    show_help | fold -s -w "$COLUMNS"
    exit 0
  fi

  if [[ "$1" == "--" ]]; then
    shift
    local suppress=1
    local note="$(parse_note "$*")"
    set --
  else
    local data=$(cat "$NOTES_FILE")
  fi

  while [ $# -gt 0 ]; do
    case "$1" in
      -a|--after)
        local after_date="$2"
        verify_date "$after_date"
        shift 2
        ;;
      -b|--before)
        local before_date="$2"
        verify_date "$before_date"
        shift 2
        ;;
      -d|--date)
        local on_date="$2"
        verify_date "$on_date"
        shift 2
        ;;
      -xd|--not-date)
        local exclude_on_date="$2"
        verify_date "$exclude_on_date"
        shift 2
        ;;
      -m|--match)
        local match="$2"
        shift 2
        ;;
      -xm|--not-match)
        local exclude_match="$2"
        shift 2
        ;;
      -r|--git-repo)
        if [[ $2 =~ ^- ]] || [[ $2 == "" ]]; then
          local git_repo="$repo"
        else 
          local git_repo="$2"
          shift
        fi
        shift
        ;;
      -xr|--not-git-repo)
        if [[ $2 =~ ^- ]] || [[ $2 == "" ]]; then
          local exclude_git_repo="$repo"
        else 
          local exclude_git_repo="$2"
          shift
        fi
        shift
        ;;
      -B|--git-branch)
        if [[ $2 =~ ^- ]] || [[ $2 == "" ]]; then
          local git_branch="$branch"
        else 
          local git_branch="$2"
          shift
        fi
        shift 
        ;;
      -xB|--not-git-branch)
        if [[ $2 =~ ^- ]] || [[ $2 == "" ]]; then
          local exclude_git_branch="$branch"
        else 
          local exclude_git_branch="$2"
          shift
        fi
        shift
        ;;
      -g|--git)
        local git_repo="$repo"
        local git_branch="$branch"
        shift
        ;;
      -xg|--not-git)
        local exclude_git_repo="$repo"
        local exclude_git_branch="$branch"
        shift
        ;;
      -X|--extract)
        local extract=1
        shift
        ;;
      -s|--suppress)
        local suppress=1
        shift
        ;;
      -e|--edit)
        local edit=1
        shift
        ;;
      -t|--today)
        local today=1
        shift
        ;;
      -l|--last)
        local last=1
        if [[ $2 =~ ^[0-9]+$ ]]; then
          local last="$2"
          shift 
        fi
        shift
        ;;
      -l[0-9]*) # a special case for those who like to use no space
        local last="${1:2}"
        shift
        ;;
      -h|--help)
        show_help | fold -s -w "$COLUMNS"
        exit 0
        ;;
      -i|--info)
        show_info | fold -s -w "$COLUMNS"
        exit 0
        ;;
      --version)
        show_version | fold -s -w "$COLUMNS"
        exit 0
        ;;
      --)
        shift
        local note="$(parse_note "$@")"
        break
        ;;
      *)
        echo "  Unknown option: $1" >&2
        echo "   ! If you meant to add a note, use '--' before it." >&2
        exit 1
        ;;
    esac
  done
  
  if ! [[ $suppress ]]; then
    [[ $today ]] && on_date=$(date +%Y-%m-%d)
    [[ $on_date ]] &&  data=$(awk -F$'\t' -v date="$on_date" '$2 ~ date' <<< "$data") 
    [[ $exclude_on_date ]] &&  data=$(awk -F$'\t' -v date="$exclude_on_date" '$2 !~ date' <<< "$data")
    [[ $after_date ]] &&  data=$(awk -F$'\t' -v date="$after_date" '$2 >= date' <<< "$data") 
    [[ $before_date ]] &&  data=$(awk -F$'\t' -v date="$before_date" '$2 < date' <<< "$data") 
    [[ $match ]] && data=$(awk -F$'\t' -v mtch="$match" '$6 ~ mtch' <<< "$data")
    [[ $exclude_match ]] && data=$(awk -F$'\t' -v mtch="$exclude_match" '$6 !~ mtch' <<< "$data")
    [[ $git_repo ]] && data=$(awk -F$'\t' -v repo="$git_repo" '$4 ~ repo' <<< "$data")
    [[ $exclude_git_repo ]] && data=$(awk -F$'\t' -v repo="$exclude_git_repo" '$4 !~ repo' <<< "$data")
    [[ $git_branch ]] && data=$(awk -F$'\t' -v branch="$git_branch" '$5 ~ branch' <<< "$data")
    [[ $exclude_git_branch ]] && data=$(awk -F$'\t' -v branch="$exclude_git_branch" '$5 !~ branch' <<< "$data")
    [[ $last ]] && data=$(tail -n "$last" <<< "$data")

    if [[ $edit ]]; then
      local editor=${EDITOR:-vim}
      local tmpfile=$(mktemp)
      echo "$data" | column -t -s$'\t' > "$tmpfile"
      $editor "$tmpfile"
      rm "$tmpfile"
    else 
      echo "$data"
    fi

    if [[ $extract ]]; then
      mv "$NOTES_FILE" "$NOTES_FILE.bak"
      grep -vx -f <(echo "$data") "$NOTES_FILE.bak" > "$NOTES_FILE"
    fi
  fi

  if [[ -z $note ]]; then
    exit 0
  fi

  local date=$(date +%Y-%m-%d)
  local time=$(date +%H:%M:%S)
  local user=$(whoami)
  # Append the note to the file
  echo -e "$user\t$date\t$time\t$repo\t$branch\t$note" >> "$NOTES_FILE"

}

main "$@"
